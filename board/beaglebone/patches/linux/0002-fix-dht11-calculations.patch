/*
 * Copyright (C) 2018 David De Grave <david@ledav.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
--- a/drivers/iio/humidity/dht11.c	2020-10-27 23:08:41.000000000 +0100
+++ b/drivers/iio/humidity/dht11.c	2020-11-13 21:04:18.895633452 +0100
@@ -97,10 +97,16 @@
 	int i;
 
 	dev_dbg(dht11->dev, "%d edges detected:\n", dht11->num_edges);
-	for (i = 1; i < dht11->num_edges; ++i) {
-		dev_dbg(dht11->dev, "%d: %lld ns %s\n", i,
-			dht11->edges[i].ts - dht11->edges[i - 1].ts,
-			dht11->edges[i - 1].value ? "high" : "low");
+
+	dev_dbg(dht11->dev, " 0: ts[%lld] value[%d]\n",
+			dht11->edges[0].ts,
+			dht11->edges[0].value);
+
+	for ( i = 1 ; i < dht11->num_edges ; i++ ) {
+		dev_dbg(dht11->dev, "%2d: ts[%lld] value[%d] +%lld\n", i,
+			dht11->edges[i].ts,
+			dht11->edges[i].value,
+			dht11->edges[i].ts - dht11->edges[i - 1].ts);
 	}
 }
 #endif /* CONFIG_DYNAMIC_DEBUG */
@@ -121,20 +127,22 @@
 
 static int dht11_decode(struct dht11 *dht11, int offset)
 {
-	int i, t;
+	int i, t, o;
 	char bits[DHT11_BITS_PER_READ];
 	unsigned char temp_int, temp_dec, hum_int, hum_dec, checksum;
 
 	for (i = 0; i < DHT11_BITS_PER_READ; ++i) {
-		t = dht11->edges[offset + 2 * i + 2].ts -
-			dht11->edges[offset + 2 * i + 1].ts;
-		if (!dht11->edges[offset + 2 * i + 1].value) {
-			dev_dbg(dht11->dev,
-				"lost synchronisation at edge %d\n",
-				offset + 2 * i + 1);
+		o = offset + (2 * i) + 1;
+		t = dht11->edges[o+1].ts - dht11->edges[o].ts;
+#ifdef CONFIG_DYNAMIC_DEBUG
+		dev_dbg(dht11->dev, "dht11_decode> i[%d] o[%d] t[%d] (ts[%lld] value[%d])"
+				, i, o, t, dht11->edges[o].ts, dht11->edges[o].value);
+#endif
+		if ( ! dht11->edges[o].value ) {
+			dev_err(dht11->dev, "dht11_decode> lost synchronisation at edge %d\n", o);
 			return -EIO;
 		}
-		bits[i] = t > DHT11_THRESHOLD;
+		bits[i] = t > DHT11_THRESHOLD; // > 49ns = 1, between 20ns & 49ns = 0
 	}
 
 	hum_int = dht11_decode_byte(bits);
@@ -142,26 +150,17 @@
 	temp_int = dht11_decode_byte(&bits[16]);
 	temp_dec = dht11_decode_byte(&bits[24]);
 	checksum = dht11_decode_byte(&bits[32]);
-
+#ifdef CONFIG_DYNAMIC_DEBUG
+	dev_dbg(dht11->dev, "dht11_decode> hum_int[%u] hum_dec[%u] temp_int[%u] temp_dec[%u] checksum[%u]",
+			hum_int, hum_dec, temp_int, temp_dec, checksum);
+#endif
 	if (((hum_int + hum_dec + temp_int + temp_dec) & 0xff) != checksum) {
-		dev_dbg(dht11->dev, "invalid checksum\n");
+		dev_err(dht11->dev, "invalid checksum\n");
 		return -EIO;
 	}
-
 	dht11->timestamp = ktime_get_boottime_ns();
-	if (hum_int < 4) {  /* DHT22: 100000 = (3*256+232)*100 */
-		dht11->temperature = (((temp_int & 0x7f) << 8) + temp_dec) *
-					((temp_int & 0x80) ? -100 : 100);
-		dht11->humidity = ((hum_int << 8) + hum_dec) * 100;
-	} else if (temp_dec == 0 && hum_dec == 0) {  /* DHT11 */
-		dht11->temperature = temp_int * 1000;
-		dht11->humidity = hum_int * 1000;
-	} else {
-		dev_err(dht11->dev,
-			"Don't know how to decode data: %d %d %d %d\n",
-			hum_int, hum_dec, temp_int, temp_dec);
-		return -EIO;
-	}
+	dht11->temperature = (temp_int * 10) + temp_dec;
+	dht11->humidity = (hum_int * 10) + hum_dec;
 
 	return 0;
 }
@@ -177,11 +176,14 @@
 	/* TODO: Consider making the handler safe for IRQ sharing */
 	if (dht11->num_edges < DHT11_EDGES_PER_READ && dht11->num_edges >= 0) {
 		dht11->edges[dht11->num_edges].ts = ktime_get_boottime_ns();
-		dht11->edges[dht11->num_edges++].value =
-						gpiod_get_value(dht11->gpiod);
+		dht11->edges[dht11->num_edges++].value = gpiod_get_value(dht11->gpiod);
 
-		if (dht11->num_edges >= DHT11_EDGES_PER_READ)
+		if (dht11->num_edges >= DHT11_EDGES_PER_READ) {
+#ifdef CONFIG_DYNAMIC_DEBUG
+			dev_dbg(dht11->dev, "dht11_handle_irq() work complete !");
+#endif
 			complete(&dht11->completion);
+		}
 	}
 
 	return IRQ_HANDLED;
@@ -197,7 +199,9 @@
 	mutex_lock(&dht11->lock);
 	if (dht11->timestamp + DHT11_DATA_VALID_TIME < ktime_get_boottime_ns()) {
 		timeres = ktime_get_resolution_ns();
+#ifdef CONFIG_DYNAMIC_DEBUG
 		dev_dbg(dht11->dev, "current timeresolution: %dns\n", timeres);
+#endif
 		if (timeres > DHT11_MIN_TIMERES) {
 			dev_err(dht11->dev, "timeresolution %dns too low\n",
 				timeres);
@@ -217,29 +221,30 @@
 
 		dht11->num_edges = 0;
 		ret = gpiod_direction_output(dht11->gpiod, 0);
-		if (ret)
+		if (ret) {
+			dev_err(dht11->dev, "%s:%d:gpio_direction_output = %d\n", __FILE__, __LINE__, ret);
 			goto err;
+		}
 		usleep_range(DHT11_START_TRANSMISSION_MIN,
 			     DHT11_START_TRANSMISSION_MAX);
 		ret = gpiod_direction_input(dht11->gpiod);
-		if (ret)
+		if (ret) {
+			dev_err(dht11->dev, "%s:%d:gpio_direction_input = %d\n", __FILE__, __LINE__, ret);
 			goto err;
-
+		}
 		ret = request_irq(dht11->irq, dht11_handle_irq,
 				  IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,
 				  iio_dev->name, iio_dev);
-		if (ret)
+		if (ret) {
+			dev_err(dht11->dev, "%s:%d:request_irq = %d\n", __FILE__, __LINE__, ret);
 			goto err;
-
-		ret = wait_for_completion_killable_timeout(&dht11->completion,
-							   HZ);
+		}
+		ret = wait_for_completion_killable_timeout(&dht11->completion, HZ);
 
 		free_irq(dht11->irq, iio_dev);
-
 #ifdef CONFIG_DYNAMIC_DEBUG
 		dht11_edges_print(dht11);
 #endif
-
 		if (ret == 0 && dht11->num_edges < DHT11_EDGES_PER_READ - 1) {
 			dev_err(dht11->dev, "Only %d signal edges detected\n",
 				dht11->num_edges);
@@ -255,19 +260,21 @@
 			if (!ret)
 				break;
 		}
-
-		if (ret)
+		if (ret) {
+			dev_err(dht11->dev, "%s:%d:dht11_decode = %d\n", __FILE__, __LINE__, ret);
 			goto err;
+		}
 	}
-
-	ret = IIO_VAL_INT;
+#ifdef CONFIG_DYNAMIC_DEBUG
+	else    dev_dbg(dht11->dev, "Too fast, returning previous values !");
+#endif
+err:	ret = IIO_VAL_INT;
 	if (chan->type == IIO_TEMP)
 		*val = dht11->temperature;
 	else if (chan->type == IIO_HUMIDITYRELATIVE)
 		*val = dht11->humidity;
 	else
 		ret = -EINVAL;
-err:
 	dht11->num_edges = -1;
 	mutex_unlock(&dht11->lock);
 	return ret;
